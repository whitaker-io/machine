run:
  go: '1.21'
  deadline: 5m
# include test files or not, default is true
  tests: false
linters-settings:
  revive:
    ignore-generated-header: true
    severity: warning
    rules:
    - name: add-constant
      severity: error
      arguments: [{"maxLitCount": "3", "allowStrs": "\"name\"", "allowInts": "0,1,2", "allowFloats": "0.0,0.,1.0,1.,2.0,2.", "ignoreFuncs": "os\\.*,fmt\\.Println,make"}]
    - name: argument-limit
      severity: error
      arguments: [4]
    - name: atomic
      severity: error
    - name: bare-return
      severity: error
    - name: blank-imports
      severity: error
    - name: bool-literal-in-expr
      severity: error
    - name: call-to-gc
      severity: error
    - name: cognitive-complexity
      severity: error
      arguments: [11]
    - name: confusing-results
      severity: error
    - name: constant-logical-expr
      severity: error
    - name: context-as-argument
      severity: error
    - name: context-keys-type
      severity: error
    - name: cyclomatic
      severity: error
      arguments: [6]
    - name: datarace
      severity: error
    - name: deep-exit
      severity: error
    - name: defer
      severity: error
      arguments: [["call-chain","loop"]]
    - name: dot-imports
      severity: error
    - name: duplicated-imports
      severity: error
    - name: early-return
      severity: error
    - name: empty-block
      severity: error
    - name: empty-lines
      severity: error
    - name: error-naming
      severity: error
    - name: error-return
      severity: error
    - name: error-strings
      severity: error
    - name: errorf
      severity: error
    - name: exported
      severity: error
    - name: function-length
      severity: error
      arguments: [20,0]
    - name: function-result-limit
      severity: error
      arguments: [3]
    - name: get-return
      severity: error
    - name: identical-branches
      severity: error
    - name: if-return
    - name: import-shadowing
      severity: error
    - name: increment-decrement
      severity: error
    - name: indent-error-flow
      severity: error
    - name: line-length-limit
      severity: error
      arguments: [120]
    - name: max-public-structs
      severity: error
      arguments: [10]
    - name: modifies-parameter
      severity: error
    - name: modifies-value-receiver
      severity: error
    - name: nested-structs
      severity: error
    - name: optimize-operands-order
      severity: error
    - name: package-comments
      severity: error
    - name: range
      severity: error
    - name: range-val-address
      severity: error
    - name: range-val-in-closure
      severity: error
    - name: receiver-naming
      severity: error
    - name: redefines-builtin-id
      severity: error
    - name: string-format
      severity: error
    - name: string-of-int
      severity: error
    - name: struct-tag
      severity: error
    - name: superfluous-else
      severity: error
    - name: time-equal
      severity: error
    - name: time-naming
      severity: error
    - name: unconditional-recursion
      severity: error
    - name: unexported-return
      severity: error
    - name: unhandled-error
      severity: error
    - name: unnecessary-stmt
      severity: error
    - name: unreachable-code
      severity: error
    - name: unused-parameter
      severity: error
    - name: unused-receiver
      severity: error
    - name: use-any
      severity: error
    - name: useless-break
      severity: error
    - name: var-declaration
      severity: error
    - name: var-naming
      severity: error
    - name: waitgroup-by-value
      severity: error
  exhaustive:
    default-signifies-exhaustive: false
  funlen:
    lines: 100
    statements: 50
  gci:
    local-prefixes: github.com/whitaker-io/go-mix
  goconst:
    min-len: 2
    min-occurrences: 2
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - octalLiteral
      - whyNoLint
      - ifElseChain
  gocyclo:
    min-complexity: 10
  gomnd:
    settings:
      mnd:
        # don't include the "operation" and "assign"
        checks: argument,case,condition,return
  govet:
    check-shadowing: true
  lll:
    line-length: 140
  maligned:
    suggest-new: true
  misspell:
    locale: US
  nolintlint:
    allow-leading-space: true # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-unused: false # report any unused nolint directives
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: false # don't require nolint directives to be specific about which linter is being skipped
linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - revive
    - bodyclose
    - depguard
    - dogsled
    - dupl
    - errcheck
    - exhaustive
    - funlen
    - goconst
    # - gocritic
    - gocyclo
    - gofmt
    - goimports
    - revive
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - lll
    - misspell
    - nakedret
    - nolintlint
    - rowserrcheck
    - exportloopref
    - staticcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - whitespace

issues:
  exclude-use-default: false
  exclude:
    # ignore the false positive erros resulting from not including a comment above every `package` keyword
    - should have a package comment, unless it's in another file for this package (golint)
      # golint: Annoying issue about not having a comment. The rare codebase has such comments
      # - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)
      # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked
      # golint: False positive when tests are defined in package 'test'
    - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this
      # staticcheck: Developers tend to write in C-style with an
      # explicit 'break' in a 'switch', so it's ok to ignore
    - ineffective break statement. Did you mean to break out of the outer loop
      # gosec: Too many false-positives on 'unsafe' usage
    - Use of unsafe calls should be audited

    # gosec: Too many false-positives for parametrized shell calls
    - Subprocess launch(ed with variable|ing should be audited)

    # gosec: Duplicated errcheck checks
    - G104

    # gosec: Unsafe defer
    - G307

    # gosec: Too many issues in popular repos
    - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)

    # gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
    - Potential file inclusion via variable
